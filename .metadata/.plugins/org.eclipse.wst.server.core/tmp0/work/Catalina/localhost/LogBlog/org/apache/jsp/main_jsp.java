/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-02-08 15:27:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.io.PrintWriter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html\"; charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width\", initial-scale=\"1\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"css/custom.css\">\r\n");
      out.write("<title>LogBlog</title>\r\n");
      out.write("<style>\r\n");
      out.write("   .nav-container {\r\n");
      out.write("       margin-bottom: 20px;\r\n");
      out.write("   }\r\n");
      out.write("   .nav-item {\r\n");
      out.write("       margin-right: 10px;\r\n");
      out.write("       padding: 5px;\r\n");
      out.write("   }\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("//해시 기반 네비게이션\r\n");
      out.write("function checkHash() {\r\n");
      out.write("    const hash = window.location.hash.slice(1);\r\n");
      out.write("    if (hash) {\r\n");
      out.write("        // 특수문자 필터링\r\n");
      out.write("        if(hash.includes(':') || hash.includes('(') || hash.includes(')')) {\r\n");
      out.write("            console.log(\"특수문자가 포함되어 있어 차단됩니다.\");\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // about이나 features인 경우 컨텐츠만 변경\r\n");
      out.write("        if(hash === 'about') {\r\n");
      out.write("            document.getElementById('mainContent').innerHTML = `\r\n");
      out.write("                <div class=\"jumbotron\">\r\n");
      out.write("                    <h1>웹 사이트 소개</h1>\r\n");
      out.write("                    <p>LogBlog 웹사이트의 상세 소개입니다.</p>\r\n");
      out.write("                </div>\r\n");
      out.write("            `;\r\n");
      out.write("            return;\r\n");
      out.write("        } \r\n");
      out.write("        else if(hash === 'features') {\r\n");
      out.write("            document.getElementById('mainContent').innerHTML = `\r\n");
      out.write("                <div class=\"jumbotron\">\r\n");
      out.write("                    <h1>주요 기능</h1>\r\n");
      out.write("                    <p>LogBlog의 주요 기능들을 소개합니다.</p>\r\n");
      out.write("                </div>\r\n");
      out.write("            `;\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("        // about이나 features가 아닌 경우에만 location.href 실행\r\n");
      out.write("        window.location.href = decodeURIComponent(hash);\r\n");
      out.write("    }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 해시 변경 이벤트 리스너\r\n");
      out.write("window.addEventListener('hashchange', checkHash);\r\n");
      out.write("window.onload = checkHash;\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   ");

   	String userID = null;
   	if(session.getAttribute("userID") != null){
   		userID = (String) session.getAttribute("userID");
   	}
   
      out.write("\r\n");
      out.write("   <nav class=\"navbar navbar-default\">\r\n");
      out.write("   	<div class=\"navbar-header\">\r\n");
      out.write("   		<button type=\"button\" class=\"navbar-toggle collapsed\"\r\n");
      out.write("   			data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collpase-1\"\r\n");
      out.write("   			aria-expanded=\"false\">\r\n");
      out.write("   			<span class=\"icon-bar\"></span>\r\n");
      out.write("   			<span class=\"icon-bar\"></span>\r\n");
      out.write("   			<span class=\"icon-bar\"></span>\r\n");
      out.write("   			</button>\r\n");
      out.write("   			<a class=\"navbar-brand\" href=\"main.jsp\">LogBlog</a>\r\n");
      out.write("   	</div>\r\n");
      out.write("   	<div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\">\r\n");
      out.write("   		<ul class=\"nav navbar-nav\">\r\n");
      out.write("   			<li class=\"active\"><a href=\"main.jsp\">메인</a></li>\r\n");
      out.write("   			<li><a href=\"logblog.jsp\">게시판</a></li>\r\n");
      out.write("   		</ul>\r\n");
      out.write("   		");

   			if(userID == null) {
   		
      out.write("\r\n");
      out.write("   		<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("   			<li class=\"dropdown\">\r\n");
      out.write("   				<a href=\"#\" class=\"dropdown-toggle\"\r\n");
      out.write("   				data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\r\n");
      out.write("   				aria-expanded=\"false\">접속하기<span class=\"caret\"></span>\r\n");
      out.write("   				</a>\r\n");
      out.write("   				\r\n");
      out.write("   				<ul class=\"dropdown-menu\">\r\n");
      out.write("   					<li ><a href=\"login.jsp\">로그인</a></li>\r\n");
      out.write("   					<li><a href=\"join.jsp\">회원가입</a></li>\r\n");
      out.write("   				</ul>\r\n");
      out.write("   			</li>\r\n");
      out.write("   		</ul>\r\n");
      out.write("   		");

   			} else {
   		
      out.write("\r\n");
      out.write("   		<ul class=\"nav navbar-nav navbar-right\">\r\n");
      out.write("   			<li class=\"dropdown\">\r\n");
      out.write("   				<a href=\"#\" class=\"dropdown-toggle\"\r\n");
      out.write("   				data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\"\r\n");
      out.write("   				aria-expanded=\"false\">회원관리<span class=\"caret\"></span>\r\n");
      out.write("   				</a>\r\n");
      out.write("   				<ul class=\"dropdown-menu\">\r\n");
      out.write("   					<li><a href=\"logoutAction.jsp\">로그아웃</a></li>\r\n");
      out.write("   					<li><a href=\"myPageCheck.jsp\">마이 페이지</a></li>\r\n");
      out.write("   				</ul>\r\n");
      out.write("   			</li>\r\n");
      out.write("   		</ul>\r\n");
      out.write("   		");

   			}
   		
      out.write("\r\n");
      out.write("   	</div>\r\n");
      out.write("   </nav>\r\n");
      out.write("\r\n");
      out.write("   <!-- 해시 기반 네비게이션 메뉴 -->\r\n");
      out.write("   <div class=\"container\">\r\n");
      out.write("       <div class=\"nav-container\">\r\n");
      out.write("           <a href=\"#about\" class=\"nav-item\">소개</a>\r\n");
      out.write("           <a href=\"#features\" class=\"nav-item\">주요기능</a>\r\n");
      out.write("       </div>\r\n");
      out.write("       <div>현재 섹션: </div>\r\n");
      out.write("       <div id=\"currentSection\"></div>\r\n");
      out.write("       \r\n");
      out.write("       <!-- 메인 컨텐츠 영역 -->\r\n");
      out.write("       <div id=\"mainContent\">\r\n");
      out.write("           <div class=\"jumbotron\">\r\n");
      out.write("               <h1>웹 사이트 소개</h1>\r\n");
      out.write("               <p>LogBlog 게시판 입니다.</p>\r\n");
      out.write("               <p><a class=\"btn btn-primary btn-pull\" href=\"#about\" role=\"button\">자세히 알아보기</a></p>\r\n");
      out.write("           </div>\r\n");
      out.write("       </div>\r\n");
      out.write("   </div>\r\n");
      out.write("   <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\r\n");
      out.write("   <script src=\"js/bootstrap.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
