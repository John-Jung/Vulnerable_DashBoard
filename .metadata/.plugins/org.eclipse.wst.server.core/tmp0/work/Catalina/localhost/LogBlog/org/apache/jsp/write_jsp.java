/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-01-14 00:56:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.PrintWriter;

public final class write_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("java.io.PrintWriter");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html\"; charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width\", initial-scale=\"1\">\n");
      out.write("<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n");
      out.write("<title>LogBlog</title>\n");
      out.write("<script>\n");
      out.write("function validateFileExtension() {\n");
      out.write("    var fileInput = document.querySelector('input[type=\"file\"]');\n");
      out.write("    if(fileInput.files.length > 0) {\n");
      out.write("        var fileName = fileInput.files[0].name;\n");
      out.write("        var allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp', '.bmp', 'txt']; \n");
      out.write("        var isValid = false;\n");
      out.write("        \n");
      out.write("        var firstExt = \".\" + fileName.split('.')[1];\n");
      out.write("        \n");
      out.write("        allowedExtensions.forEach(function(ext) {\n");
      out.write("            if(firstExt.toLowerCase() === ext) {\n");
      out.write("                isValid = true;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("        \n");
      out.write("        if(!isValid) {\n");
      out.write("            alert('이미지 파일만 업로드 가능합니다.');\n");
      out.write("            fileInput.value = '';\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("    return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function validateForm(event) {\n");
      out.write("    // 제목과 내용 입력 필드 가져오기\n");
      out.write("    var title = document.querySelector('input[name=\"blogTitle\"]').value;\n");
      out.write("    var content = document.querySelector('textarea[name=\"blogContent\"]').value;\n");
      out.write("\n");
      out.write("    // `<script>` 태그 검증 로직\n");
      out.write("    var scriptTagPattern = /<\\s*script.*?>.*?<\\s*\\/\\s*script\\s*>/gi;\n");
      out.write("    if (scriptTagPattern.test(title) || scriptTagPattern.test(content)) {\n");
      out.write("        alert('잘못된 입력입니다. 스크립트 태그는 사용할 수 없습니다.');\n");
      out.write("        event.preventDefault(); // 폼 제출 방지\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    if (!validateFileExtension()) {\n");
      out.write("        event.preventDefault();\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // 비밀글 체크 시 비밀번호 확인\n");
      out.write("    var isSecret = document.getElementById('isSecret').checked;\n");
      out.write("    var password = document.getElementById('blogPassword').value;\n");
      out.write("\n");
      out.write("    if (isSecret && !password) {\n");
      out.write("        alert('비밀글 작성 시 비밀번호를 입력해주세요.');\n");
      out.write("        event.preventDefault();\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("    return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("function togglePassword() {\n");
      out.write("    var passwordField = document.getElementById('blogPassword');\n");
      out.write("    var isSecret = document.getElementById('isSecret').checked;\n");
      out.write("    passwordField.disabled = !isSecret;\n");
      out.write("    if(!isSecret) {\n");
      out.write("        passwordField.value = '';\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    ");

        String userID = null;
        if(session.getAttribute("userID") != null){
            userID = (String) session.getAttribute("userID");
        }
    
      out.write("\n");
      out.write("    <nav class=\"navbar navbar-default\">\n");
      out.write("        <!-- 네비게이션 바 코드는 동일 -->\n");
      out.write("    </nav>\n");
      out.write("    <div class=\"container\">\n");
      out.write("        <div class=\"row\">\n");
      out.write("            <form method=\"post\" action=\"writeAction.jsp\" enctype=\"multipart/form-data\" onsubmit=\"return validateForm(event)\">\n");
      out.write("                <table class=\"table table-striped\" style=\"text-align: center; border: 1px solid #dddddd\">\n");
      out.write("                    <thead>\n");
      out.write("                        <tr>\n");
      out.write("                            <th colspan=\"2\" style=\"background-color: #eeeeee; text-align: center;\">게시판 글쓰기 양식</th>\n");
      out.write("                        </tr>\n");
      out.write("                    </thead>\n");
      out.write("                    <tbody>\n");
      out.write("                        <tr>\n");
      out.write("                            <td><input type=\"text\" class=\"form-control\" placeholder=\"글 제목\" name=\"blogTitle\" maxlength=\"50\"></td>\n");
      out.write("                        </tr>\n");
      out.write("                        <tr>\n");
      out.write("                            <td><textarea class=\"form-control\" placeholder=\"글 내용\" name=\"blogContent\" maxlength=\"2048\" style=\"height: 150px\"></textarea></td>\n");
      out.write("                        </tr>\n");
      out.write("                        <tr>\n");
      out.write("                            <td>\n");
      out.write("                                <div class=\"form-group\">\n");
      out.write("                                    <label>\n");
      out.write("                                        <input type=\"checkbox\" id=\"isSecret\" name=\"isSecret\" onchange=\"togglePassword()\"> 비밀글로 작성\n");
      out.write("                                    </label>\n");
      out.write("                                </div>\n");
      out.write("                                <input type=\"password\" class=\"form-control\" id=\"blogPassword\" name=\"blogPassword\" placeholder=\"비밀번호\" disabled>\n");
      out.write("                            </td>\n");
      out.write("                        </tr>\n");
      out.write("                        <tr>\n");
      out.write("                            <td><input type=\"file\" name=\"uploadFile\" onchange=\"validateFileExtension()\"></td>\n");
      out.write("                        </tr>\n");
      out.write("                    </tbody>\n");
      out.write("                </table>\n");
      out.write("                <input type=\"submit\" class=\"btn btn-primary pull-right\" value=\"글쓰기\">\n");
      out.write("            </form>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n");
      out.write("    <script src=\"js/bootstrap.js\"></script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
